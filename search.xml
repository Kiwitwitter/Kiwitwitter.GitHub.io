<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWS Cloud Practitioner, AWS Security</title>
    <url>/2020/01/21/aws-cloud-practitioner-4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="The-Shared-Responsibility-Model"><a href="#The-Shared-Responsibility-Model" class="headerlink" title="The Shared Responsibility Model"></a>The Shared Responsibility Model</h2><p>Both the user and AWS should be responsible for the security of the service running in AWS. </p>
<p>We divide the security into 7 levels, and create a shared security model. Some levels are user fully responsible for, some levels are AWS fully responsible for. </p>
<p>Model stack:</p>
<table>
<thead>
<tr>
<th>User Data</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Application</strong></td>
</tr>
<tr>
<td><strong>Guest OS</strong></td>
</tr>
<tr>
<td><strong>Hyperviser</strong></td>
</tr>
<tr>
<td><strong>Network</strong></td>
</tr>
<tr>
<td><strong>Physical</strong></td>
</tr>
</tbody></table>
<ul>
<li><p>Physical</p>
<p>This is iron and concrete, a barbed-wire fence. AWS don’t give access to any third party to the service or data centers.</p>
</li>
<li><p>Network</p>
<p>AWS fully responsible for this, AWS run the network, proprietary networking protocols designed to allow security of our systems, so elements like VPC can work at scale, velocity, and designed to protect traffic.</p>
</li>
<li><p>Hypervisor</p>
<p>AWS hypervisor uses a Xen-based hypervisor, and AWS made a lot of specific changes to the hypervisor that make it secure and scalable.</p>
</li>
<li><p>Guest OS, Application, User data</p>
<p>When user choose the operating system, user can choose whatever operating systems they use and whatever applications that they are using inside the operating system. AWS has no visibility to that, and the data are totally protected by user’s access key secret and how they encrypt it. </p>
</li>
</ul>
<h2 id="Identity-and-Access-Management"><a href="#Identity-and-Access-Management" class="headerlink" title="Identity and Access Management"></a>Identity and Access Management</h2><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><p>In the case of AWS, user is a permanent named operator. Could be human, or a machine. The Idea is that my credentials are permanent, and they stay with that named user util there is a forced rotation , whether is’a name and password, access key, secret key combination.</p>
<h3 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h3><p>A collection of users. Group can have many users, users can belong to many groups.</p>
<h3 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h3><p>In AWS, a role is not a permission, but an authentication method. A role is an operator, could be human, or a machine. The key part is the credentials with a role are temporary. </p>
<h3 id="Policy-Docs"><a href="#Policy-Docs" class="headerlink" title="Policy Docs"></a>Policy Docs</h3><p>Permissions, in every cases, happens in a seperate object known as the policy document. The policy document is a JSON document. It attaches either directly to a permanent named user or a group of users, or it can be attached directly to a role. The policy document lists the specific API or wildcard group of APIs that I am white-listing, or allowing, against which resources.</p>
<p><strong>Authentication and Authorization</strong>: Authentication is verify who you are, authorization is to verify if you have the permission to do certain activities.</p>
<h2 id="Amazon-Inspector"><a href="#Amazon-Inspector" class="headerlink" title="Amazon Inspector"></a>Amazon Inspector</h2><h3 id="IT-Security-Challenges"><a href="#IT-Security-Challenges" class="headerlink" title="IT Security Challenges"></a>IT Security Challenges</h3><p>IT scurity matters, and securing IT infrastructure is:</p>
<ul>
<li>Complex</li>
<li>Expensive</li>
<li>Time consuming - build/configure.maintain</li>
<li>Difficult to track all the changes in IT environment</li>
<li>Hard to do effectively</li>
</ul>
<h3 id="Introducing-Amazon-Inspector"><a href="#Introducing-Amazon-Inspector" class="headerlink" title="Introducing Amazon Inspector"></a>Introducing Amazon Inspector</h3><ul>
<li>Assesses applications for:<ul>
<li>Vulnerabilities</li>
<li>Deviations from best practices</li>
</ul>
</li>
<li>Produces a detailed report with:<ul>
<li>Security findings</li>
<li>Prioritzed steps for remediation</li>
</ul>
</li>
</ul>
<h3 id="Amazon-Inspector-Benefits"><a href="#Amazon-Inspector-Benefits" class="headerlink" title="Amazon Inspector Benefits:"></a>Amazon Inspector Benefits:</h3><ul>
<li>Helps identify security vulnerabilities as well as deviations from security best practices in applications, both before they are deployed and while they are running in a production environment.</li>
<li>Amazon Inspector is agent-based, API-driven, and delivered as a service. This makes it easy for you to build right into your existing DevOps process, decentralizing and automating vulnerability assessment an integral part of the deployment process</li>
<li>The service helps reduce the risk of introducing security issues during development and deployment by automating the security vulnerabilities. </li>
<li>AWS continuously assesses the AWS environment and updates a knowledge base of security best practices and rules. </li>
<li>Amazon Inspector gives security teams and auditors visibility into security testing during application development.</li>
<li>Amazon Inspector allows you to define standards and best practices for your applications and validate adherence to these standards.</li>
</ul>
<h3 id="Amazin-Inspector-Accessing"><a href="#Amazin-Inspector-Accessing" class="headerlink" title="Amazin Inspector Accessing:"></a>Amazin Inspector Accessing:</h3><ul>
<li>Amazon Inspector Console</li>
<li>AWS software development kits(SDKs)</li>
<li>Amazon Inspector HTTPS API</li>
<li>AWS command line tools</li>
</ul>
<h3 id="Built-in-rules"><a href="#Built-in-rules" class="headerlink" title="Built-in rules"></a>Built-in rules</h3><ul>
<li>Includes a knowledge base with hundreds of rules that mapped to:<ul>
<li>Common Security compliance standards</li>
<li>Vulnerability definations</li>
</ul>
</li>
<li>Regularity updated by AWS security researchers</li>
</ul>
<h2 id="AWS-Shield"><a href="#AWS-Shield" class="headerlink" title="AWS Shield"></a>AWS Shield</h2><p>AWS shield is a <strong>Managed Distributed Denial of Service</strong> protection service that safeguards applications running on AWS. The service provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support for DDOS protection.</p>
<h3 id="Differences-between-DDoS-and-DoS"><a href="#Differences-between-DDoS-and-DoS" class="headerlink" title="Differences between DDoS and DoS"></a>Differences between DDoS and DoS</h3><h4 id="DoS"><a href="#DoS" class="headerlink" title="DoS"></a>DoS</h4><p>DoS attack is a deliberate attemot to make your website or application unavailable to user-like flooding it with network traffic. Attackers use a variety of techniques that consume large amounts of network bandwidth or tie up other sysetm resources, disrupting access for legitimate users.</p>
<p>In short, a line attacker uses a single source to execute a DoS attck against a target.</p>
<h4 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h4><p>Attacker uses multiple sources to orchestrate an attack against a target. Sources may include distributed groups of malware infected computers, routers, IoT devices, and other endpoints.</p>
<p>DDoS are typically launched form a botnet of compromised computers or Internet devices. The objective to knock the targeted website or application offline for a period of time, disrupting availability for legitimate uses.</p>
<h4 id="Difficulties-of-mitigating-DDoS-attack"><a href="#Difficulties-of-mitigating-DDoS-attack" class="headerlink" title="Difficulties of mitigating DDoS attack:"></a>Difficulties of mitigating DDoS attack:</h4><ul>
<li>Protection is complex to set up, and very often, it involves re-architecting your application</li>
<li>Bandwidth issue may happen due to scalability issues if you opt to tackle mitigation from an on-oremises data center</li>
<li>May need manual intervention to initiate mitigation</li>
<li>In turn, this deplays resolution and increases network latency</li>
<li>Due to the size, duration, and complex nature of mitigation systems, it can become cost-prohibitive</li>
</ul>
<h3 id="AWS-Shield-tiers"><a href="#AWS-Shield-tiers" class="headerlink" title="AWS Shield tiers"></a>AWS Shield tiers</h3><h4 id="AWS-Shield-standard"><a href="#AWS-Shield-standard" class="headerlink" title="AWS Shield standard"></a>AWS Shield standard</h4><ul>
<li>Automatically protection<ul>
<li>Any AWS resource</li>
<li>Any AWS region</li>
</ul>
</li>
<li>Quick Detection - Always on</li>
<li>Inline attack mitigation<ul>
<li>Built-in automated mitigation techniques</li>
<li>Avoids latency impact</li>
</ul>
</li>
<li>Self Service<ul>
<li>No need to engage AWS Support</li>
</ul>
</li>
</ul>
<h4 id="AWS-Shield-Advance"><a href="#AWS-Shield-Advance" class="headerlink" title="AWS Shield Advance"></a>AWS Shield Advance</h4><ul>
<li>Specialized support</li>
<li>Advanced attack mitigation</li>
<li>Visibility and attack notification</li>
<li>Always-on monitoring<ul>
<li>Amazon Route 53, Amazon CloudFront, Elastic Load Balancer, Elastic IP</li>
</ul>
</li>
<li>Enhance detection</li>
<li>DDoS cost protection</li>
</ul>
<h3 id="AWS-Shield-benefits"><a href="#AWS-Shield-benefits" class="headerlink" title="AWS Shield benefits"></a>AWS Shield benefits</h3><ol>
<li>Seamless integration and deployment</li>
<li>Cost Efficient</li>
<li>Customizable protection</li>
</ol>
<h3 id="AWS-Shield-Protections"><a href="#AWS-Shield-Protections" class="headerlink" title="AWS Shield Protections"></a>AWS Shield Protections</h3><ol>
<li>Protecing DNS<ul>
<li>Using Route 53<ul>
<li>AWS Shield Standard - Hosted zones</li>
<li>AWS Shield Advanced - Attack visibility, DRT support</li>
</ul>
</li>
</ul>
</li>
<li>Protection web applications and APIs<ul>
<li>Using Amazon CloudFront or Application Load Balancer<ul>
<li>AWS Shield Standard - Always-on, scrubs bad traffic</li>
<li>AWS Shield Advanced - DRT support, traffic engineering, application layer protection</li>
</ul>
</li>
</ul>
</li>
<li>Protectin other applications<ul>
<li>Using Elastic IP Address<ul>
<li>AWS Shield Standard - Built-in techniques</li>
<li>AWS Shield Advanced - Custom mitigation profiles, additional bandwidth</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="AWS-Compliance"><a href="#AWS-Compliance" class="headerlink" title="AWS Compliance"></a>AWS Compliance</h2><h3 id="AWS-security-information"><a href="#AWS-security-information" class="headerlink" title="AWS security information"></a>AWS security information</h3><p>AWS shares security information by:</p>
<ul>
<li>Obtaining industry certifications</li>
<li>Publishing security and control practices</li>
<li>Compliance reports</li>
</ul>
<h3 id="Assurance-programs"><a href="#Assurance-programs" class="headerlink" title="Assurance programs"></a>Assurance programs</h3><p>AWS provides compliance information and resources:</p>
<ul>
<li>Certification/attestations</li>
<li>Legal/regulatory support</li>
<li>Alignments/frameworks</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-23%20at%201.01.34%20AM.jpg" alt></p>
<h3 id="AWS-risk-and-compliance-programs"><a href="#AWS-risk-and-compliance-programs" class="headerlink" title="AWS risk and compliance programs"></a>AWS risk and compliance programs</h3><ul>
<li>Includes:<ul>
<li>Criminal Justince Information Service (CJIS)</li>
<li>Cloud Security Alliance (CSA)</li>
<li>Family Educational Rights and Privacy Act (FERPA)</li>
<li>Health Insurance Portability and Accountability Act (HIPAA)</li>
<li>Motion Picture Association of America (MPAA)</li>
</ul>
</li>
<li>Help customers:<ul>
<li>Document a complete control and governance framework</li>
<li>Deploy solutions that meet several industry-specific standards</li>
</ul>
</li>
</ul>
<h3 id="Components-of-AWS-compliance"><a href="#Components-of-AWS-compliance" class="headerlink" title="Components of AWS compliance"></a>Components of AWS compliance</h3><ul>
<li>Risk management</li>
<li>Control environment</li>
<li>Information security</li>
</ul>
<h4 id="Risk-management-foundation"><a href="#Risk-management-foundation" class="headerlink" title="Risk management foundation"></a>Risk management foundation</h4><p>AWS management established:</p>
<ul>
<li>Business plan:<ul>
<li>Include risk management</li>
<li>Re-evaluated at list biannually</li>
</ul>
</li>
<li>Process:<ul>
<li>Identify risks</li>
<li>Implement appropiate measures</li>
<li>Assess various internal/external risks</li>
</ul>
</li>
</ul>
<h4 id="Risk-management-Framework"><a href="#Risk-management-Framework" class="headerlink" title="Risk management Framework"></a>Risk management Framework</h4><p>AWS compliance and security teams:</p>
<ul>
<li>Established framework and policies</li>
<li>Maintain security policy</li>
<li>Provide security training</li>
<li>Perform application security reviews<ul>
<li>Confidentially, integrity, and availability of data</li>
<li>Conformance to IS Policy</li>
</ul>
</li>
</ul>
<h4 id="Risk-management-at-work"><a href="#Risk-management-at-work" class="headerlink" title="Risk management at work"></a>Risk management at work</h4><ul>
<li>AWS security scans for vulnerabilities and notifies appropiate parties to remediate identified vulnerabilities </li>
<li>Customers request permission to conduct scans of their cloud infrastrcuture</li>
<li>Independent security firms regularly perform vulnerability threat assessments</li>
<li>Findings/recommendations categorized and delivered to AWS leadership</li>
</ul>
<h3 id="Control-environment"><a href="#Control-environment" class="headerlink" title="Control environment"></a>Control environment</h3><ul>
<li>Includes policies, processes, and control activities to secure the delivery of AWS service offerings</li>
<li>Supports the operating effectiveness of AWS control framework</li>
<li>Integrates cloud-specific controls</li>
<li>Applies leading industry practices</li>
</ul>
<h3 id="Information-security"><a href="#Information-security" class="headerlink" title="Information security"></a>Information security</h3><ul>
<li>Designed to protect<ul>
<li>Confidentiality</li>
<li>Integrity</li>
<li>Availability </li>
</ul>
</li>
<li>Publishes security whitepaper</li>
</ul>
<h3 id="Customer-compliance"><a href="#Customer-compliance" class="headerlink" title="Customer compliance"></a>Customer compliance</h3><ul>
<li>Review trusted information and document compliance requirements</li>
<li>Design and implement control objectives that meet compliance requirements</li>
<li>Identify and document controls owned by outside parties</li>
<li>Verify all control objectives are met and all key controls are designed and operating effectively</li>
</ul>
]]></content>
      <tags>
        <tag>study</tag>
        <tag>aws_cloud_practitioner</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Cloud Practitioner Essentials, Architecture</title>
    <url>/2020/01/20/aws-cloud-practitioner-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="The-AWS-Well-Architectured-Framework"><a href="#The-AWS-Well-Architectured-Framework" class="headerlink" title="The AWS Well-Architectured Framework"></a>The AWS Well-Architectured Framework</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><ul>
<li>Access and improve architectures</li>
<li>Understand how design decisions impact business</li>
<li>Learn the five pillars and design principles</li>
</ul>
<h3 id="5-Pillars"><a href="#5-Pillars" class="headerlink" title="5 Pillars"></a>5 Pillars</h3><h4 id="In-general"><a href="#In-general" class="headerlink" title="In general:"></a>In general:</h4><ul>
<li>Security</li>
<li>Reliability</li>
<li>Performance efficiency</li>
<li>Cost optimization</li>
<li>Operational excellence</li>
</ul>
<h4 id="Security-Pillar"><a href="#Security-Pillar" class="headerlink" title="Security Pillar:"></a>Security Pillar:</h4><ul>
<li><p>Identify and access management (IAM)</p>
<p>Critical to ensure that only authorized and authenticated users are able to access your resources, and only in the manner you intend.</p>
</li>
<li><p>Detective controls</p>
<p>Can be used to identify a potential security incident by considering approaches such as capturing or analyzing logs and integration auditing controls.</p>
</li>
<li><p>Infrastructure protection</p>
<p>Ensures that systems and services within your architecture are protected against unintended and unauthorized access.</p>
</li>
<li><p>Data protection</p>
<p>There are numerous approaches and methods to consider. Some of them include dara classification, encryption, protecting data at rest and in transit, data backup, and finally replication and recovery when needed.</p>
</li>
<li><p>Indicent response</p>
<p>Will ensure that your architecture is updated to accommodate a timely investigation in recovery.</p>
</li>
<li><p><strong>Design Principles</strong>:</p>
<ul>
<li>Implement security at all layers</li>
<li>Enable traceability</li>
<li>Apply principle of least provilege</li>
<li>Focus on securing your system</li>
<li>Automate</li>
</ul>
</li>
</ul>
<h4 id="Reliability-Pillar"><a href="#Reliability-Pillar" class="headerlink" title="Reliability Pillar:"></a>Reliability Pillar:</h4><ul>
<li><p>Recover from issues/failures</p>
</li>
<li><p>Apply best practices in:</p>
<ul>
<li><p>Foundations</p>
<p>In order to achiveve reliability, your architecture and system must have a well-planned foundation in place that can handle changes in demand or with requirement, and also detect failure and automatically heal itself. </p>
<p>Before architecting any system, foundational requirements that influence reliability should be in place.</p>
</li>
<li><p>Change management</p>
<p>It’s important to fully understand and be aware of how change can affect your system.</p>
<p>If you planned proactively and monitor your system, you can accommodate and adjust to change quickly and reliably. To ensure the system is reliable, it’s a key to anticipate, become aware and respond and prevent failures form happening. </p>
</li>
<li><p>Failure management</p>
<p>In a cloud environment, you can take advantage of automation with monitoring, replace systems in your environment, and later troubleshoot failed systems, all at low cost, and all while it’s still being reliable</p>
</li>
</ul>
</li>
<li><p>Anticipate, respond, and prevent failures</p>
</li>
<li><p><strong>Design principles</strong>:</p>
<ul>
<li><p>Test recovery procedures</p>
</li>
<li><p>Automatically recover</p>
</li>
<li><p>Scale horizontally</p>
<p>When you have a large service, it’s beneficial to replace it with multiple small resources to reduce the impact of a single resources to reduce the impact of a single point of failure on the overall system.</p>
</li>
<li><p>Stop guessing capacity</p>
<p>In cloud environment, you have the ability to monitor demand and system utilization and automate the addition or removal of resources</p>
</li>
<li><p>Manage change in automation</p>
</li>
</ul>
</li>
</ul>
<h4 id="Performance-Efficiency-Pillar"><a href="#Performance-Efficiency-Pillar" class="headerlink" title="Performance Efficiency Pillar:"></a>Performance Efficiency Pillar:</h4><ul>
<li><p>Select customizable solutions</p>
<p>Solutions vary based on the kind of workload you have. With AWS, resources are virtualized and allow you to customize your solutions in many different types and configurations</p>
</li>
<li><p>Review to continually innovate</p>
<p>With review, you can continually innovate your solutions and take advantage of newer technologies that become available. </p>
</li>
<li><p>Monitor AWS services</p>
<p>You need to monitor the performance to ensure that you can remediate any issues before customers are affected and become aware of them.</p>
</li>
<li><p>Consider the trade-offs</p>
</li>
<li><p><strong>Design Principles</strong>:</p>
<ul>
<li><p>Democratize advanced technologies</p>
<p>Consume new knowledge and technologies as a service rather than having IT team figure out how to do it.</p>
</li>
<li><p>Go global in minutes</p>
<p>Do global depploy with AWS for lower latency and better experience for customers, at a minial cost</p>
</li>
<li><p>Use a serverless architectures</p>
<p>This remove the need to run and  maintain traditional servers for compute actibities, and also remove burden and can lower transactional costs</p>
</li>
<li><p>Experiment more often</p>
<p>Carry out quick testing to enhance efficiency</p>
</li>
<li><p>Have mechanical sympathy</p>
<p>Use technology approach that best aligns to what you’re trying to do.</p>
</li>
</ul>
</li>
</ul>
<h4 id="Cost-Optimization-Pillar"><a href="#Cost-Optimization-Pillar" class="headerlink" title="Cost Optimization Pillar:"></a>Cost Optimization Pillar:</h4><ul>
<li><p>Use cost-effective resources</p>
<p>Make sure the system is using the right services, resources and configurations is one of the key parts to cost savings</p>
</li>
<li><p>Matching supply with demand</p>
</li>
<li><p>Increase expenditure awareness</p>
<p>Being fully cognizant of what spending and cost drivers are happening with your business is critical. So having the ability to see, understand, and break down the current costs, predict future costs, and plan accordingly only enhances the cost optimization of your architecture in the cloud.</p>
</li>
<li><p>Optimize over time</p>
</li>
<li><p><strong>Design Principles</strong>:</p>
<ul>
<li><p>Adopt consumption omdel</p>
</li>
<li><p>Measure overall efficiency</p>
<p>Measure the business output of the systems, and the costs associated woth delivery it, then take this measurement to uderstand how gains are made from increasing output and reducing cost.</p>
</li>
<li><p><strong>Reduce</strong> spending on data center operations</p>
</li>
<li><p>Analyze and attribute expenditure</p>
<p>Accurately identidy the usage and cost of systems. Customers can measure their return on investment, which provides them the opportunities to optimize services and reduce costs.</p>
</li>
<li><p>Use managed service</p>
<p>Use managed service to remove operational burden.</p>
</li>
</ul>
</li>
</ul>
<h4 id="Operational-Excellence-Pillar"><a href="#Operational-Excellence-Pillar" class="headerlink" title="Operational Excellence Pillar:"></a>Operational Excellence Pillar:</h4><ul>
<li>Manage and automate changes</li>
<li>Respond to events</li>
<li>Define the standards</li>
</ul>
<h2 id="Fault-Tolerance-and-High-Availability"><a href="#Fault-Tolerance-and-High-Availability" class="headerlink" title="Fault Tolerance and High Availability"></a>Fault Tolerance and High Availability</h2><p>Fault Tolerance refers to:</p>
<ul>
<li>Ability of a system to remain operational</li>
<li>Built-in redundancy of a application’s component</li>
</ul>
<p>High Availability refers to:</p>
<ul>
<li>Systems are generally functioning and accessible</li>
<li>Downtime is minimized</li>
<li>Minimal human intervention is required</li>
<li>Minimal up-front financial investment</li>
</ul>
<p>On premises vs AWS:</p>
<table>
<thead>
<tr>
<th>Traditional (On premises)</th>
<th>AWS</th>
</tr>
</thead>
<tbody><tr>
<td>Expensive<br>Only mission-critical applications</td>
<td>Multiple servers<br>Availability Zones<br>Regions<br>Fault Tolerant services</td>
</tr>
</tbody></table>
<h3 id="High-Availability-Service-Tools"><a href="#High-Availability-Service-Tools" class="headerlink" title="High Availability Service Tools"></a>High Availability Service Tools</h3><ul>
<li><p>Elastic Load Balancers</p>
<p>ELB is a service that distributes incoming traffic or load amongst your instances. ELB can also send metrics to Amazon CloudWatch, which is a managed monitoring service.</p>
<p>ELB can be a trigger and notify you of high latency or if servers are becoming over-utilized.</p>
</li>
<li><p>Elastic IP Addresses</p>
<p>Elastic IP Addresses are useful in providing greater fault-tolerance for applications.</p>
<p>Elastic IPs are static IP addresses designed for dynamic cloud computing. </p>
<p>This tool allows you to mask a failure of an instance or software by allowing your user to use the same IP address with replacement resources.</p>
</li>
<li><p>Amazon Route 53</p>
<p>This is used to translate domain names into IP addresses. </p>
<p>It was developed to support simple routing, latency-based routing, health checks and DNS failover, and geolocation routing.</p>
</li>
<li><p>Auto Scaling</p>
<p>Designed to assist user in building a flexible system that can adjust and be modified depending on changes in customer demand. </p>
<p>With Auto Scaling, you can avoid limitations of manually creating new resources. Instead, you can create new resources on demand or have scheduled provisioning. This ensures that your applications and systems are always available no matter what the load is. </p>
</li>
<li><p>Amazon CloudWatch</p>
<p>It collects and tracks your metrics of your applications. Another feature is that you have the ability to create and use your own custom metrics. If there is high latency or metrics that have passsed the set threshold, CloudWatch can adjust automatically to ensure high availability of your architecture.</p>
</li>
</ul>
<h3 id="Fault-Tolerant-Tools"><a href="#Fault-Tolerant-Tools" class="headerlink" title="Fault Tolerant Tools"></a>Fault Tolerant Tools</h3><ul>
<li><p>Amazon Simple Queue Service</p>
<p>Can be used as the backbone of the fault-tolerant application. It is highly reliable distributed messaging system. SQS can help you ensure that your queue is always available.</p>
</li>
<li><p>Amazon Simple Storage Service</p>
<p>Provides high durable and fault-tolerant data storage. S3 stores all of the data redundantly on multiple different devices across multiple facilities in a region.</p>
</li>
<li><p>Amazon Relational Database Service</p>
<p>Provides high availability and fault tolerance by offering several features tp enhance the reliability of your critical databases.</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>study</tag>
        <tag>aws_cloud_practitioner</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Cloud Practitioner, AWS Integrated Services</title>
    <url>/2020/01/12/aws-cloud-practitioner-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Application-Load-Balancer"><a href="#Application-Load-Balancer" class="headerlink" title="Application Load Balancer"></a>Application Load Balancer</h2><h3 id="Service-Introduction"><a href="#Service-Introduction" class="headerlink" title="Service Introduction"></a>Service Introduction</h3><ul>
<li>Application Load Balancer is the second type of balancer introduced as part of Elastic Load Balancing Service.</li>
<li>Some of the additional features for the Application Load Balancer are the ability to enable additional routing mechanisms for your request using path- or host-based routing, native IPv6 support in a VPC, AWS web application firewall integration, and more.</li>
</ul>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><ul>
<li><p>Key terms</p>
<table>
<thead>
<tr>
<th>Concept</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td>Listeners</td>
<td align="left">A Listener is a process that checks for connection requests, using the protocol and port that you configure. The rules that you define for a listener determine how the load balancer routes requests to the target in one or more target groups</td>
</tr>
<tr>
<td>Target</td>
<td align="left">A target is a destination for traffic based on the established listener rules.</td>
</tr>
<tr>
<td>Target Group</td>
<td align="left">Each target group routes requests to one or more registered targets using the protocol and port number specified. A target can be registered with multiple target groups. Health checks can be configured on a per target group basis.</td>
</tr>
</tbody></table>
</li>
<li><p>Added features</p>
<ul>
<li><p>Path and host-based routing</p>
<ul>
<li><p>Path-based provides rules that forward requests to different target groups</p>
</li>
<li><p>Host-based provides rules that forward requests to different target groups based on host name</p>
</li>
</ul>
</li>
<li><p>Deletion Protection &amp; Request tracing</p>
<p>Request tracing can be used to track HTTP requests from clients to target</p>
</li>
<li><p>Dynamic Ports</p>
<p>Amazon ECS integrates with Application Load Balancer to expose Dynamic Ports utilized by scheduled containers</p>
</li>
<li><p>AWS WAF (AWS Web Application Firewall)</p>
</li>
<li><p>Native IPv6 Support</p>
</li>
</ul>
</li>
</ul>
<h3 id="Use-Case"><a href="#Use-Case" class="headerlink" title="Use Case"></a>Use Case</h3><ul>
<li><p>Sample use case:</p>
<p><img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-13%20at%2010.34.40%20PM.jpg" alt></p>
</li>
</ul>
<h2 id="Auto-Scaling"><a href="#Auto-Scaling" class="headerlink" title="Auto Scaling"></a>Auto Scaling</h2><h3 id="Service-Introduction-1"><a href="#Service-Introduction-1" class="headerlink" title="Service Introduction"></a>Service Introduction</h3><p>Auto Scaling helps you ensure that you have the correct number of Amazon EC2 instances available to handle the load for your application. </p>
<p>We need to monitor the workload using Amazon CloudWatch, though CloudWatch will not add or remove EC2 instances.</p>
<p>We need to keep Scalibity as well as Automation.</p>
<h3 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h3><ul>
<li><p>Scaling out and Scaling in</p>
<ul>
<li>Auto Scaling can automatically adjust the number of EC2 instances running based in the condition that user defines, or as scheduled.</li>
<li>If Auto Scaling adds more instances, this is termed <strong>scaling out</strong>.</li>
<li>When Auto Scaling terminates instances, this is termed <strong>scaling in</strong>.</li>
</ul>
</li>
<li><p>Auto Scaling Components</p>
<ul>
<li>Launch Configuration<ul>
<li>AMI</li>
<li>Instance type</li>
<li>Security Groups</li>
<li>Roles</li>
</ul>
</li>
<li>Auto Scaling Group<ul>
<li>VPC and Subnet(s)</li>
<li>Load Balancer</li>
<li>Minimum instances</li>
<li>Maximum instances</li>
<li>Desired capacity</li>
</ul>
</li>
<li>Auto Scaling Policy<ul>
<li>Scheduled</li>
<li>On-demand</li>
<li>Scale-out policy</li>
<li>Scale-in policy</li>
</ul>
</li>
</ul>
</li>
<li><p>Dynamic Auto Scaling</p>
<p><img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-13%20at%2011.51.03%20PM.jpg" alt></p>
</li>
</ul>
<h2 id="Amazon-Route-53"><a href="#Amazon-Route-53" class="headerlink" title="Amazon Route 53"></a>Amazon Route 53</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>  Amazon Route 53 is a Domain Name System, or DNS, web service designed to provide businesses and developers with a reliable and highly scalable way to route end-user t internet applications.</p>
<h3 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h3><p>  <img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-14%20at%2012.11.15%20AM.jpg" alt></p>
<p>  The user asks to translate a name into an IP address &lt;A&gt; and Route 53 does the translation.</p>
<h2 id="Amazon-Relational-Database-Services-RDS"><a href="#Amazon-Relational-Database-Services-RDS" class="headerlink" title="Amazon Relational Database Services (RDS)"></a>Amazon Relational Database Services (RDS)</h2><h3 id="Challenges-of-Relational-Database"><a href="#Challenges-of-Relational-Database" class="headerlink" title="Challenges of Relational Database"></a>Challenges of Relational Database</h3><ul>
<li>Server Mantenance and energy footprint</li>
<li>Software install and patches</li>
<li>database backups and high availability</li>
<li>Limits on scalability</li>
<li>Data security</li>
<li>OS install and patches</li>
</ul>
<h3 id="Service-Introduction-2"><a href="#Service-Introduction-2" class="headerlink" title="Service Introduction"></a>Service Introduction</h3><p>Amazon RDS is a managed service that sets up and operates a relational database in the cloud, Amazon RDS provides a cost-efficient and resizable capacity while automating time-consuming administrative tasks. </p>
<p>Amazon RDS gives the performance, high availability, security, and compatibility to users.</p>
<p><img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-18%20at%201.00.17%20AM.jpg" alt></p>
<p>Amazon RDS manages:</p>
<ul>
<li>OS Installation and patches</li>
<li>Database software install and patches</li>
<li>Database backups</li>
<li>High Availability</li>
<li>Scaling</li>
<li>Power and rack &amp; stack</li>
<li>Server maintenance</li>
</ul>
<h3 id="Overview-and-Use-Cases"><a href="#Overview-and-Use-Cases" class="headerlink" title="Overview and Use Cases"></a>Overview and Use Cases</h3><p>The basic building block if Amazon RFS is the database instance. A database instance is an isolated environment that can contain multiple user-created databases and can be accessed by using the same tools and applications that you use with a standalone database instance.</p>
<p>The resources found in a database instance are determined by its database instance class, the type of storage, is dictated by the type of disks.</p>
<p>DB Instance class includes:</p>
<ul>
<li>CPU</li>
<li>Memory</li>
<li>Network performance</li>
</ul>
<p>DB Instance Storage Includes:</p>
<ul>
<li>Magnetic</li>
<li>General purpose (SSD)</li>
<li>Provisioned IOPS</li>
</ul>
<p>Amazon RDS currently supports 6 databases:</p>
<ul>
<li>MySQL</li>
<li>Amazon Aurora</li>
<li>Microsoft Sequel Server</li>
<li>PostgreSQL</li>
<li>MariaDB</li>
<li>Oracle</li>
</ul>
<p>You can run an instance using Amazon VPC and have control of the virtual networking environment.</p>
<p><img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-18%20at%201.51.13%20AM.jpg" alt></p>
<p>User can select own IP address range, create subnets, and configure routing and access control lists.  </p>
<p>The basic functionality of Amazon RDS is the same whether or not it is in the VPC. But usually the database insatcne is isolated in an VPC and is only made directly accessible to indicated application instances.</p>
<p>One of the most powerful features of Amazon RDS is the ability to configure the database instance for high availability with a multi-agency deployment. Once configured, RDS automatically generates a standby copy of the database instance in another Availability Zone within the same VPC. After seeding the database copy, transactions are synchronously replicated to the standby copy. </p>
<p><img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-18%20at%202.00.45%20AM.jpg" alt></p>
<p>Having multi-AZ RDS database can provide high availability as well as protection against database instance failure. If one master instance failed, the RDS can bring the replication online as the new master instance. And there should be no data loss due to the synchronous replication. Because applications reference the database by name using RDS DNS endpoint, user don’t need to change anything in the application code to use the standby copy.</p>
<p>RDS also supports the creation of read replicas for MySQL, MariaDB, PostgreSQL and Amazon Aurora. Updates made to the source database instances are asynchronously copied to the read replica instance. User can reduce the read load on source by routing read queries to read replicas, and can also scale out beyond the capacity constraints of a single database instance for read-heavy database workloads. Read replica can also be promoted to become the master database instance, but due to asynchronous replication, this requires manual action.</p>
<p>Read replicas can be created in a different region than the master database, which help satisfy disaster recovery requirements or cutting down latency by redirecting read queries to to a read replica. </p>
<p>Use cases:</p>
<ul>
<li><p>RDS is ideal for Web and mobile applications that need a database with high throughput, massive storage scalability and high availability. </p>
</li>
<li><p>RDS doesn’t have any licensing constraints, it perfectly fits the variable usage pattern of these applications. RDS also provides a flexible, secured, and low-cost database solution for online sales and retailing. </p>
</li>
<li><p>RDS manages the database infrastructure, so mobile and online game developers don’t have to worry about provisioning, scaling, or monitoring database servers. </p>
</li>
</ul>
<h3 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h3><ul>
<li>Highly scalable</li>
<li>HIgh Performance</li>
<li>Easy to administer</li>
<li>Available and durable</li>
<li>Secure and compliant</li>
</ul>
<h2 id="AWS-Lambda"><a href="#AWS-Lambda" class="headerlink" title="AWS Lambda"></a>AWS Lambda</h2><h3 id="Overview-2"><a href="#Overview-2" class="headerlink" title="Overview"></a>Overview</h3><ul>
<li><p>Feature</p>
<ul>
<li>Fully-Managed serverless compute</li>
<li>Event-driven execution</li>
<li>Sub-second meeting</li>
<li>Multiple languages supported</li>
</ul>
</li>
<li><p>AWS Lambda is compute service that lets users run code with provisioning or managing services. AWS Lambda executes code only when needed and scales automatically to thousands of requests per second. </p>
</li>
<li><p>AWS Lambda runs code on a highly available compute infrastructure, which provides all administration, including server and operating system maintenance, capacity provisioning, and auto-scaling, code monitoring and logging.</p>
</li>
<li><p>AWS Lambda supports a variety of programming languages, including Node.js, Java, C# and Python.</p>
</li>
<li><p>AWS Lambda is a event-based computing, user can run code in response to events, including changes to Amazon S3 buckets or an Amazon DynamoDB table.</p>
</li>
<li><p>Lambda can respond to HTTP requests using Amazon API Gateway, and caan also invoke code using API calls made using AWS SDKs. </p>
</li>
<li><p>AWS Lambda is intended to support serverless and micro-service applications. User can build serverless applications that are triggered by AWS Lambda functions, and can automatically deploy them using AWS CodePipeline, AWS CodeDeploy</p>
</li>
</ul>
<h3 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h3><p>It’s very simple to use AWS Lambda, user just configure the environment, upload code and watch it run.</p>
<p>AWS use cases includes:</p>
<ul>
<li>Automated backups</li>
<li>Event-driven log analysis</li>
<li>Event-driven transformations</li>
<li>Internet of Things</li>
<li>operating serverless websites</li>
</ul>
<p>Also can use Amazon Lambda and Amazon Kinesis to process real-time streaming data for </p>
<ul>
<li>application activity tracking</li>
<li>transaction order processing</li>
<li>clickstream analysis</li>
<li>data cleamsing metrics</li>
<li>generation log filtering</li>
<li>Indexing social media analysis</li>
<li>device telemetry and monitoring</li>
</ul>
<h2 id="AWS-Elastic-Beanstalk"><a href="#AWS-Elastic-Beanstalk" class="headerlink" title="AWS Elastic Beanstalk"></a>AWS Elastic Beanstalk</h2><h3 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h3><p>What is Elastic Beanstalk?</p>
<ul>
<li><p>Platform as a Service, means that you have the whole infrastructure created for you</p>
</li>
<li><p>Allows quick deployment of your applications</p>
</li>
<li><p>Reduces management complexity</p>
</li>
<li><p>Keep control in your hands:</p>
<ul>
<li>Choose your instance</li>
<li>Choose your database</li>
<li>Set and adjust Auto Scaling</li>
<li>Update your application</li>
<li>Access server log files</li>
<li>Enable HTTPS on Load Balancer</li>
</ul>
</li>
<li><p>Supports a large range of platforms</p>
<ul>
<li>Packer Builder</li>
<li>Single Container, Multicontainer, or Preconfigured Docker</li>
<li>Go</li>
<li>Java SE</li>
<li>Java with Tomcat</li>
<li>.NET on Windows Server with IIS</li>
<li>Node.js</li>
<li>PHP</li>
<li>Python</li>
<li>Ruby</li>
</ul>
</li>
<li><p>Easy Delpoyment and update</p>
<p><img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-19%20at%204.40.27%20PM.jpg" alt></p>
</li>
</ul>
<h3 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h3><ul>
<li><p>Elastic Beanstalk provides:</p>
<p><img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-19%20at%204.37.49%20PM.jpg" alt></p>
</li>
</ul>
<h2 id="Amazon-Simple-Notification-Service"><a href="#Amazon-Simple-Notification-Service" class="headerlink" title="Amazon Simple Notification Service"></a>Amazon Simple Notification Service</h2><h3 id="Instroduction"><a href="#Instroduction" class="headerlink" title="Instroduction"></a>Instroduction</h3><p>Amazon Simple Notification Service:</p>
<ul>
<li><p>Flexible, fully managed pub/sub messaging and mobile communications service</p>
</li>
<li><p>SNS also coodinates the delivery of messages to subscribing endpoints and clients</p>
</li>
<li><p>Easy to setup, operate and send reliable communications</p>
</li>
</ul>
<p>Amazon SNS pub/sub Messaging and Mobile Notifications:</p>
<p><img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-19%20at%205.08.28%20PM.jpg" alt></p>
<h2 id="Amazon-CloudWatch"><a href="#Amazon-CloudWatch" class="headerlink" title="Amazon CloudWatch"></a>Amazon CloudWatch</h2><h3 id="Service-Introduction-3"><a href="#Service-Introduction-3" class="headerlink" title="Service Introduction"></a>Service Introduction</h3><p>Amazon CloudWatch monitors your Amazon Web Services (AWS) resources and the applications you run on AWS in real time, including:</p>
<ul>
<li>Collect and track metrics</li>
<li>Collect and monitor log files</li>
<li>Set alarms</li>
<li>Automatically react to changes</li>
</ul>
<h3 id="Overview-3"><a href="#Overview-3" class="headerlink" title="Overview"></a>Overview</h3><p><img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-19%20at%206.03.26%20PM.jpg" alt></p>
<h3 id="Use-Cases-1"><a href="#Use-Cases-1" class="headerlink" title="Use Cases"></a>Use Cases</h3><ul>
<li>Respond to state changes in your AWS resources</li>
<li>Automatically invoke an AWS Lambda function to update DNS entries when a event notifies that Amazon EC2 instance enters the running state</li>
<li>Direct specific API records from CloudTrail to a Kinesis stream for detailed analysis of potential security or availability risks</li>
<li>Take a snapshot of an Amazon EBS volume on a schedule</li>
<li>Log S3 Object Level Operation using CloudWatch Events</li>
</ul>
<h3 id="CloudWatch-Components"><a href="#CloudWatch-Components" class="headerlink" title="CloudWatch Components"></a>CloudWatch Components</h3><h4 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h4><ul>
<li><p>Data about the performance of the systems</p>
</li>
<li><p>Represents a time-ordered set of data points that are published to CloudWatch</p>
</li>
<li><p>By default, sevral services provide free metrics for resources</p>
<p>Such as Amazon EC2 insatcne, Amazon EBS volumes, Amazon RDS DB instances</p>
</li>
<li><p>Publish your own application metrics</p>
</li>
<li><p>Load all the metrics in your account for search, graphing, and alarms</p>
</li>
</ul>
<h4 id="Alarms"><a href="#Alarms" class="headerlink" title="Alarms"></a>Alarms</h4><ul>
<li><p>Watch a single metric</p>
</li>
<li><p>Performs one or more actions</p>
<p>Based on the value of the metric relative to a threshold over a number of time periods</p>
</li>
<li><p>The action can be:</p>
<ul>
<li>An Amazon EC2 action</li>
<li>The Auto Scaling action</li>
<li>A notification sent to an Amazon SNS topic</li>
</ul>
</li>
<li><p>Invokes actions for sustained state changes only</p>
</li>
</ul>
<h4 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h4><ul>
<li>New real-time stream of system events that describe changes in AWS resources</li>
<li>Use simple rules to match events and route them to one or more target functions or streams</li>
<li>Aware of operational changes as they occur</li>
<li>Responds to these operational changes amd takes corrective action as necessary</li>
<li>Schedule automated actions that self-trigger at certain times using Cron or rate expressions</li>
</ul>
<h4 id="Logs"><a href="#Logs" class="headerlink" title="Logs"></a>Logs</h4><ul>
<li>Monitor and troubleshoot systems and applications using existing log files<ul>
<li>Monitor logs for specific phrases, values, or patterns</li>
</ul>
</li>
<li>Retrieve the associated log data from CloudWatch Logs</li>
<li>Includes an installable agent for Ubuntu, Amazon Linux, and WIndows at no additional charge</li>
<li>Monitor Logs from Amazon EC2 Instances in Real-time</li>
<li>Monitor AWS ClouTrail Logged Events</li>
<li>Archive Log Data, your metrics can be stored durably in CloudWatch as CloudWatch log:<ul>
<li>Admins and other parties can review CloudWatch Logs directly in the AWS Management Console</li>
<li>Logs can be stored in Amazon S3, to be accessed by other services or another user.</li>
<li>Logs can be streamed in real time to data-processing solutions like Amazon Kinesis Streams or AWS Lambda.</li>
</ul>
</li>
</ul>
<h4 id="Dashboards"><a href="#Dashboards" class="headerlink" title="Dashboards"></a>Dashboards</h4><ul>
<li>Customizable home pages in the CLoudWatch console to monitor your resources in a single view<ul>
<li>Even those resources that are spread acress different regions</li>
</ul>
</li>
<li>Create customized views of the metrics and alarms for your AWS resources.<ul>
<li>Each dashboard can display multiple metrics, and can be accessorized with text and images</li>
</ul>
</li>
<li>Create dashvoards by using the console, the AWS CLI, or by using the <strong>PutDashboard</strong> API</li>
</ul>
<h2 id="Amazon-CloudFront"><a href="#Amazon-CloudFront" class="headerlink" title="Amazon CloudFront"></a>Amazon CloudFront</h2><h3 id="AWS-Global-Infrastructure"><a href="#AWS-Global-Infrastructure" class="headerlink" title="AWS Global Infrastructure"></a>AWS Global Infrastructure</h3><p>AWS CLoudFront uses a global network of more than 80 locations and more than 10 regional edge caches for content delivery. The edge locations are located globally around the world, and frequently increases. </p>
<h3 id="CloudFront-overview"><a href="#CloudFront-overview" class="headerlink" title="CloudFront overview"></a>CloudFront overview</h3><ul>
<li>Global, Growing Network</li>
<li>Secure Content at the Edge</li>
<li>Deep Integration with Key AWS Services</li>
<li>High Performance</li>
<li>Cost Effective</li>
<li>Easy to Use</li>
</ul>
<h3 id="Creating-and-configuring-a-CDN"><a href="#Creating-and-configuring-a-CDN" class="headerlink" title="Creating and configuring a CDN"></a>Creating and configuring a CDN</h3><p>When creating a CDN, you need to choose what type you want to create. RTMP is used for video content streaming, and Web is designed to use it by usual content delivery that is not a video stream. </p>
<p>Then, you must specify at least one origin and one behavior. </p>
<ul>
<li>Basically, the origin can be your S3 bucket or any application that you run even outside AWS. You can put the IP address of your web server, the load balancer endpoints taht can be reachable over the Internet.</li>
<li>The behavior basically matches: “What is the URL pattern that you want to associate woth that origin?”</li>
<li>User can always add more origins in the future, but must specify one during creation.</li>
<li>User can even use other AWS services or AWS command line interface to automate the creation of new distributions for new environment. </li>
</ul>
<h3 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h3><ul>
<li>static asset caching</li>
<li>live and on-demand video streaming</li>
<li>security and DDoS protection</li>
<li>API acceleration</li>
<li>Software Distribution</li>
</ul>
<h2 id="AWS-CloudFormation"><a href="#AWS-CloudFormation" class="headerlink" title="AWS CloudFormation"></a>AWS CloudFormation</h2><h3 id="Service-Introduction-4"><a href="#Service-Introduction-4" class="headerlink" title="Service Introduction"></a>Service Introduction</h3><ul>
<li><p>AWS CloudFormation <strong>simplifies</strong> the task of <strong>repeatedly</strong> and <strong>predictably</strong> creating groups of related resources that power your applications. CloudFormation is all about resource provisioning.</p>
</li>
<li><p>There are three method to call the APIs: the AWS management console, the AWS CLI, the AWS SDK/API. Using one of the three methods, we can construct virtual environment for our workploads. </p>
</li>
<li><p>We use API calls such as CreateVPC to construct a VPC, LaunchInstances to create a new EC2 instance.</p>
</li>
<li><p>CloudFormation is a:</p>
<ul>
<li>Fully-managed service</li>
<li>Create, update and delete resources in stacks</li>
</ul>
</li>
</ul>
<h3 id="Overview-4"><a href="#Overview-4" class="headerlink" title="Overview"></a>Overview</h3><ul>
<li><p>The big picture of this process is:</p>
<ul>
<li>Confirmation reads template files (the instructions on what resources to actually go ahead and provisions)</li>
<li>CloudFormation constructs the resources listed in the template file and the output of this process is your environment, which is known as a stack.</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Kiwitwitter/hexo-storage/master/img/Screen%20Shot%202020-01-20%20at%2012.07.41%20AM.jpg" alt></p>
</li>
<li><p>You can interact with the service through the management console or build scripts to automate CloudFormation actions.</p>
</li>
</ul>
<h4 id="Stacks"><a href="#Stacks" class="headerlink" title="Stacks:"></a>Stacks:</h4><ul>
<li>Resources generated</li>
<li>Unit of deployment</li>
<li>Create Stack, Update Stack by rerunning a modified template, Delete Stack</li>
<li>Most organizations modularize stacks by creating separate templates for networking, security and applications.</li>
</ul>
<h4 id="Templates"><a href="#Templates" class="headerlink" title="Templates:"></a>Templates:</h4><ul>
<li><p>describe the resources to provision</p>
</li>
<li><p>These are text files written in JSON or YAML format</p>
</li>
<li><p>As an added benefit, if you provisioned your environment using templates, then your template become a form of documentation for your environment.</p>
</li>
<li><p>Template includes:</p>
<ul>
<li>The same information you would specify if you built the environment mannually through the console</li>
<li>Template does use specific formatting constructs, but the resource and property information is the same</li>
<li>You don’t have to list your resources in the exact order of the creation, we can simply use <strong>DependsOn</strong> attribute to control the order CloudFormation will create the resources, so that we can build a sequence of events, like Database server needs to be created before a web server.</li>
</ul>
</li>
<li><p>Parameters in the template can be used to control the stacks generated. E.g. Parameter one creates the development stack, Parameter two will generate the product stack.</p>
</li>
<li><p><strong>Infrastructure as Code</strong>:</p>
<p>Means you can simply control your infrastructure through software code like a template, which is flexible. </p>
<p>You can change it and also keep different versions of the same template,.</p>
<p>Organizations that reply on CloudFormation build out template libraries much as they do code repositories for applications.</p>
</li>
</ul>
<h4 id="Two-critical-requirements-for-CloudFormation"><a href="#Two-critical-requirements-for-CloudFormation" class="headerlink" title="Two critical requirements for CloudFormation:"></a>Two critical requirements for CloudFormation:</h4><ul>
<li>Templates have to be correct, otherwise CloudFormation stops</li>
<li>The user who run the CloudFormation msut have the permission to all services referenced in the template. </li>
</ul>
]]></content>
      <tags>
        <tag>study</tag>
        <tag>aws_cloud_practitioner</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Cloud Practitioner, Core Services</title>
    <url>/2020/01/02/aws-cloud-partitioner-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Amazon-Elastic-Cloud-Compute-EC2"><a href="#Amazon-Elastic-Cloud-Compute-EC2" class="headerlink" title="Amazon Elastic Cloud Compute (EC2)"></a>Amazon Elastic Cloud Compute (EC2)</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><ul>
<li>EC2 = Elastic Compute Cloud</li>
<li>Can be used to do many things, including but not limited to Application Server, Web Server, Database Server, Game Server, Mail Server, etc.</li>
<li>Elastic refers to the fact that if properly configured, you can increase and decrease the amount of servers required by application automatically according to the current demands on that application</li>
<li>We call them instances instead of servers</li>
<li>Characters:<ul>
<li>Pay as you go</li>
<li>Broad selection of Hardware and Software</li>
<li>Global hosting</li>
<li>more on <a href="aws.amazon.com/ec2">aws.amazon.com/ec2</a></li>
</ul>
</li>
</ul>
<h3 id="Build-And-Configure-EC2-Instance"><a href="#Build-And-Configure-EC2-Instance" class="headerlink" title="Build And Configure EC2 Instance"></a>Build And Configure EC2 Instance</h3><ol>
<li>Login to AWS Console</li>
<li>Choose a region</li>
<li>Launch EC2 Wizard</li>
<li>Select Amazon Machine Inage (AMI, Software)</li>
<li>Select Instance Type (Hardware)</li>
<li>Configure network</li>
<li>Configure storage</li>
<li>Configure key pairs (in order to ssh into this host)</li>
<li>Launch and Connect</li>
</ol>
<h2 id="Amazon-Elastic-Block-Store-EBS"><a href="#Amazon-Elastic-Block-Store-EBS" class="headerlink" title="Amazon Elastic Block Store (EBS)"></a>Amazon Elastic Block Store (EBS)</h2><h3 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h3><ul>
<li>EBS Volumes are used for storage</li>
<li>Can choose between HDD and SSD types</li>
<li>Persistent and customizable black storage for EC2 instances</li>
<li>Designed for being durable and available, which means that the data in a volume is automatically replicated across multiple servers</li>
<li>Backup using Snapshots, also can recover using Snapshots, share Snapshots across Availability Zones</li>
<li>Easy and transparent Encryption on EC2 side</li>
<li>Elastic Volumes, can increase volume or even change type of storage</li>
</ul>
<h3 id="Create-and-Attach-EBS-to-EC2-Instance"><a href="#Create-and-Attach-EBS-to-EC2-Instance" class="headerlink" title="Create and Attach EBS to EC2 Instance"></a>Create and Attach EBS to EC2 Instance</h3><ol>
<li>Login to AWS Console</li>
<li>Go to “EC2” Console</li>
<li>Go to “Elastic Block Store” sidebar, and select “Volumes”</li>
<li>EBS must be created in the same Availability Zone with EC2 Instance to be attched to</li>
<li>“Create Volume” and select “Volume Type”, specify “Size”</li>
<li>Select correct “Availibity Zone” and Create the Volume</li>
<li>Select the newly created Volume in the Volume console, Select “Attach Volume” in the “Actions” list</li>
<li>Enter the Instance and Device and Attach it</li>
<li>ssh into the EC2 Instance, and use <code>$ lsblk</code> to check the attached volume</li>
<li>Create file system using <code>$ mke2fs file_system_folder</code></li>
<li>Mount file system using ```$mount file_system_folder mount_folder``</li>
</ol>
<h2 id="Amazon-Simple-Storage-Service-S3"><a href="#Amazon-Simple-Storage-Service-S3" class="headerlink" title="Amazon Simple Storage Service (S3)"></a>Amazon Simple Storage Service (S3)</h2><h3 id="Overview-2"><a href="#Overview-2" class="headerlink" title="Overview"></a>Overview</h3><ul>
<li>Fully managed cloud storage service</li>
<li>Store virtually unlimited number of objects</li>
<li>Acces anytime, from anywhere</li>
<li>Rich security controls</li>
</ul>
<h3 id="Knowledge"><a href="#Knowledge" class="headerlink" title="Knowledge"></a>Knowledge</h3><ul>
<li>When user put a object into the S3 bucket, it’s associated with a particular AWS region</li>
<li>Whenever an object is stored in a bucket, it redundantly store across multiple AWS facilities within the selected region</li>
<li>S3 will also scale to handle high volume of request, and user only be billed for what the user used</li>
<li>Objects can be accessed from <strong>AWS Management Console</strong>, <strong>AWS CLI</strong>, <strong>AWS SDK</strong>, additionally can be accessed from any RESTful Endpoint what support HTTP and HTTPS</li>
<li>URL Access: <code>https://awsexamplebucket/s3-us-west-2.amazonaws.com/docs/hello.txt</code>, to support URL access, S3 bucket names must be globally unique and DNS compliant, and object-keys should be characters that are safe for URLs</li>
</ul>
<h3 id="Common-Use-Cases"><a href="#Common-Use-Cases" class="headerlink" title="Common Use Cases"></a>Common Use Cases</h3><ol>
<li>Storing Application Assets</li>
<li>Static Web Hosting</li>
<li>Backup &amp; Disaster recover</li>
<li>Staging area for Big Data</li>
<li>etc.</li>
</ol>
<h2 id="AWS-Global-Infrastructure"><a href="#AWS-Global-Infrastructure" class="headerlink" title="AWS Global Infrastructure"></a>AWS Global Infrastructure</h2><h3 id="Overview-3"><a href="#Overview-3" class="headerlink" title="Overview"></a>Overview</h3><ul>
<li>Regions</li>
<li>Availability Zones</li>
<li>Edge Locations</li>
</ul>
<h3 id="Regions"><a href="#Regions" class="headerlink" title="Regions"></a>Regions</h3><ul>
<li>Regions are geographical zones that holds more than 2 availability zones, and are the organizing level for AWS services</li>
<li>You need to pick the region where those resources are located for lower latency and minimizing costs and adhering regulatory requirements</li>
<li>Services can be deployed in multi-regions that best suit the business’s needs</li>
<li>Regions are completely separate entities from one another, resources in one region are not automatically replicated to another region, though some of the most common services are available in all regions</li>
</ul>
<h3 id="Availability-Zones"><a href="#Availability-Zones" class="headerlink" title="Availability Zones"></a>Availability Zones</h3><ul>
<li>Availabilty Zones are a collection of data centers within a specific region.</li>
<li>Each availability zone is physically isolated from the others, but connected together by a fast, low latency network</li>
<li>Each availability zone is a physically distinct, independent infrastructure, physically and logically independent</li>
<li>They also have their own discrete, uninterruptable power supply; onsite backup generators, cooling equipments and network connectivity</li>
<li>Isolating the availability zone means they are protected from failures in other zones, which ensures high availability </li>
<li>Data redundancy within a region means that if one zone goes down, the other zones can handle requests, that’s why AWS recommends provisioning your data across multiple Availability Zones as a best practice</li>
</ul>
<h3 id="Edge-Locations"><a href="#Edge-Locations" class="headerlink" title="Edge Locations"></a>Edge Locations</h3><ul>
<li>Edge locations host a content delivery network, in short CDN, in Amazon CloudFront. CDN is used to deliver content to your customers , requests for content will be automatically routed to the nearest edge location so that the content is delivered faster to the end uses</li>
<li>Edge Locations are typically located in highly poplated areas</li>
</ul>
<h2 id="Amazon-Virtual-Private-Cloud-VPC"><a href="#Amazon-Virtual-Private-Cloud-VPC" class="headerlink" title="Amazon Virtual Private Cloud (VPC)"></a>Amazon Virtual Private Cloud (VPC)</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The resources and services must be accessible via normal IP protocols implemented with familiar network structures. Customers need to adhere to networking best practices as well as meet regularity and organizational requirement. Amazon Virtual Private Cloud, aka VPC meets all the network requirements.</p>
<ul>
<li>A private, virtual network in the AWS Cloud<ul>
<li>Uses same concepts as on premise networking, like IP address spaces, subnets, and routing tables</li>
</ul>
</li>
<li>Allows complete control of network configuration<ul>
<li>Ability to isolate and expose resources inside VPC</li>
</ul>
</li>
<li>Offeres several layers of security controls<ul>
<li>Ability to allow and deny specific internet and internal traffic</li>
</ul>
</li>
<li>Other AWS services deploy into VPC<ul>
<li>Services inherent security built into network, integrated with numerous AWS services</li>
</ul>
</li>
</ul>
<h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul>
<li><p>Builds upon high availability of AWS Regions and Availability zones</p>
<ul>
<li>VPC lives within a Region</li>
<li>Multiple VPCs per accuount</li>
</ul>
</li>
<li><p>Subnets</p>
<ul>
<li>Used to divide Amazon VPC</li>
<li>Allows VPC to span multiple AZs</li>
<li>You can create unlimited subnets, but the fewer is recommended to reduce the complexity</li>
</ul>
</li>
<li><p>Route tables</p>
<ul>
<li>Control traffic going out of the subnets</li>
</ul>
</li>
<li><p>Internet Gateway (IGW)</p>
<ul>
<li><p>Subnets can be public or priavte, public goes to internet, private doesn’t go to internet</p>
</li>
<li><p>Allows access to the Internet from VPC</p>
</li>
</ul>
</li>
<li><p>NAT Gateway</p>
<ul>
<li>Allows private subnet resources to access Internet</li>
</ul>
</li>
<li><p>Network Access Control Lists (NACL)</p>
<ul>
<li>Control access to subnets, stateless</li>
</ul>
</li>
</ul>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><ol>
<li>Select Region</li>
<li>Create the VPC, define IP Address space for the VPC</li>
<li>Create subnets, specify the AZ of the subnet</li>
<li>Add Internet Gateway</li>
<li>Configure the acesss</li>
</ol>
<h2 id="AWS-Security-Groups"><a href="#AWS-Security-Groups" class="headerlink" title="AWS Security Groups"></a>AWS Security Groups</h2><p>At AWS, security groups will act like a built-in firewall for virtual servers. With these security groups, you have full control on how accessible your instances are. In another word, it is just another method to filter traffic to your instances, provides you control on what traffic to allow or deny. To do this, you need to configure a security group rule , that can vary from keeping instance completely private, totally public, or somewhere between.</p>
]]></content>
      <tags>
        <tag>study</tag>
        <tag>aws_cloud_practitioner</tag>
      </tags>
  </entry>
  <entry>
    <title>Something Special of My Life</title>
    <url>/2019/12/28/proposal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>突然发现随着高中毕业，写技术文档的能力越来越强，但是静下心来写人话的能力却越来越差了。以前是“爱你在心口难开”，现在是“爱你在心不知道说啥”。算了，就算是写点东西给自己看，来记录一下心情。</p>
<p>2019年也终于算到了年尾，空气中弥漫着安静祥和而又十分浮躁的气息。走在大家上说着笑着的人越来越多，而办公室中的人则毫无意外的越来越少。</p>
<p>我也在努力在完成工作和不想工作的两种想法中寻求平衡点，尽可能的完成一些肉眼可见的工作，不至于在每天的Stand-up上那么尴尬。</p>
<p>今天真的可以说是2019年众多平淡无奇的日子里比较倒霉的一天了，下午满怀期盼的开着车去Pacifica拍日落，结果盼来的是<strong>万里多云</strong>。层层叠叠、阴阴沉沉的云似乎也预示着今天注定不平凡。</p>
<p>(to be continued…)</p>

    <div id="aplayer-akwaTHJJ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="5264717" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div>
]]></content>
      <tags>
        <tag>SpecialOfLife</tag>
      </tags>
  </entry>
  <entry>
    <title>hola el mundo</title>
    <url>/2019/12/26/hola-el-mundo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Hola mi amigos,</p>
<p>This is a test on my new personal blog based on Hexo.</p>
<p>I will keep on updating my life and some interesting thoughts here. Stay tuned!</p>
<p>Yours,<br>pzhng</p>
]]></content>
  </entry>
</search>
